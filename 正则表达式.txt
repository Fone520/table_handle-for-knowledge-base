\d digit 数字
\b bound 英文单词的边界
.* 不包含换行的任意字符
'0\d\d-\d\d\d\d\d\d\d\d' = '0\d{2}-\d{8}'
\s space 任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格，等同于[\f\n\r\t\v]
\w word 字母或数字或下划线或汉字等

[ \t]  非换行符的空白
[\s\S] 任意字符包括换行符

注：对中文/汉字的特殊处理是由.Net提供的正则表达式引擎支持的，其它环境下的具体情况请查看相关文档。

+ 一个和多个
* 零个和超过零个，即任意
. 除换行符的任意字符
^ 整个字符串的开始
$ 整个字符串的结束

^\d{5,12}$ QQ号5位到12位数字
\ 转义字符

*	    重复零次或更多次
+	    重复一次或更多次
?	    重复零次或一次
{n}	    重复n次
{n,}	重复n次或更多次
{n,m}	重复n到m次

[]   指定字符
[^ ] 指定字符外

| 或，设置多个条件
() 组合字符，可以用于重复

\W	        任意不是字母，数字，下划线，汉字的字符，与\w相反
\S	        任意不是空白符的字符，与\s相反
\D	        任意非数字的字符，与\d相反
\B	        不是单词开头或结束的位置，与\b相反
[^x]	    除了x以外的任意字符，与相反
[^aeiou]	除了aeiou这几个字母以外的任意字符，与相反

\b(\w+)\b\s+\1\b可以用来匹配重复的单词，像go go, 或者kitty kitty
\1 第一个分组匹配到的值
(?<Word>\w+)、(?'Word'\w+) 为分组指定组名
\k<Word> 引用指定组名匹配到的内容

(exp)	        exp,并捕获文本到自动命名的组里
(?<name>exp)	exp,并捕获文本到名称为name的组里，也可以写成(?'name'exp)
(?:exp)	        exp,不捕获匹配的文本，也不给此分组分配组号
(?<=exp)	    以exp开始，exp后面的位置，不包括exp
(?=exp)	        以exp结尾，exp前面的位置，不包括exp
(?!exp)	        不是以exp开始，后面跟的不是exp的位置，不包括exp
(?<!exp)	    不是以exp结尾，前面不是exp的位置，不包括exp
(?#comment)	    不对正则表达式的处理产生任何影响，用于提供注释

.*?     任意尽可能少的字符
*?	    重复任意次，但尽可能少重复
+?	    重复1次或更多次，但尽可能少重复
??	    重复0次或1次，但尽可能少重复
{n,m}?	重复n到m次，但尽可能少重复
{n,}?	重复n次以上，但尽可能少重复

IgnoreCase              忽略大小写，不区分大小写
Singleline              单行模式，更改.的含义，使它与每一个字符匹配（包括换行符\n）
IgnorePatternWhitespace 忽略空白，忽略表达式中的非转义空白并启用由#标记的注释。
ExplicitCapture         显式捕获，仅捕获已被显式命名的组

(?(exp)yes|no)	把组名为exp的组匹配到的内容，当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no
(?(exp)yes)	    同上，只是使用空表达式作为no
(?(name)yes|no)	如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no
(?(name)yes)	同上，只是使用空表达式作为no

[\u4e00-\u9fa5] Unicode范围，中文字符

a=re.compile(正则表达式)      编译正则，通过a.func使用
match()                      决定re是否在字符串刚开始的位置(匹配行首)
search()                     扫描字符串，找到这个re匹配的位置(仅仅是第一个查到的)
findall()                    找到re匹配的所有字符串，返回一个列表
group()                      返回re匹配的字符串
start()                      返回匹配开始的位置
end()                        返回匹配结束的位置
span()                       返回一个元组:(开始,结束)的位置
findall()                    根据正则表达式返回匹配到的所有字符串
sub(正则,新字符串,原字符串)    替换字符串
subn(正则,新字符串,原字符串)   替换字符串，并返回替换的次数
split()                      分割字符串










